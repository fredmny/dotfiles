alias ..="cd .."
alias ll="ls -lh --color"
alias la="ls -lah --color"
alias sdnow="shutdown now"
alias ees="wine ~/apps/EES/ees.exe > /dev/null 2>&1 &"
alias ydl="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'"
alias xo='xdg-open'
alias config='/usr/bin/git --git-dir=/home/prophet/dotfiles --work-tree=/home/prophet'
alias qconf='nvim ~/.config/qtile/config.py'
alias wifi='sudo wifi-menu'
alias atomic='~/AppImage/atomicwallet.AppImage'
alias spot='systemctl --user start spotifyd.service && spt'
alias bitwarden='~/AppImage/Bitwarden.AppImage'
alias screenadjust='~/.screenlayout/standard.sh & ~/.fehbg'
alias sa='screenadjust'
alias screenrotate='~/.screenlayout/rotated.sh & ~/.fehbg'
alias uskmap='setxkbmap -layout us -variant intl'
alias dbtcomp='$HOME/.scripts/dbt_compile.sh'
alias dcu='docker compose up -d'
alias dcd='docker compose down'
alias dnet='nmcli device disconnect wlan0 && nmtui'
alias gobs='cd $HOME/obsidian_personal && ga . && gcam "vault backup"; ggpull; ggpush && cd -'
alias vf='vifm .'
alias ez='exec zsh'
alias tls='tmux ls'
alias c='clear'
alias tm='~/.config/tmux/session_templates/tmux_personal_session.sh'
alias tmw='~/.config/tmux/session_templates/tmux_work_session.sh'
alias tmkill='tmux kill-session'
alias loga='aws sso login --profile IAM-ANALYTICS'
alias vi='nvim'
alias nvconf='nvim ~/.config/nvim/'
alias gdn='gd --name-status'
alias kbtool='sudo /home/prophet/bin_/ch57x-keyboard-tool'
alias econf='nvim ~/Library/Application\ Support/espanso/match/base.yml'
alias lg='lazygit'
alias nzf='fzf --bind "enter:become(nvim {})"'

## functions
mcd () {
    mkdir -p $1
    cd $1
}

gcfix () {
	message="$@"
	complete_message="fix: $message"
	gcam  "$complete_message"
}

gcfeat () {
	message="$@"
	complete_message="feat: $message"
	gcam  "$complete_message"
}

gcchore () {
	message="$@"
	complete_message="chore: $message"
	gcam  "$complete_message"
}

gcdocs () {
	message="$@"
	complete_message="docs: $message"
	gcam  "$complete_message"
}

gbb () {
	branch="$(git branch --show-current)"
	config_message="{ \"branch\": \"$branch\" }"
	
	echo $config_message | pbcopy

	echo "Airflow dag config param copied to clipboard"
}

gcba () {
	issue_number=$1
	gcb AMERDATAN-$issue_number
}

dbtf () {
  dbt_model="$@"
  dbt build -s $dbt_model --vars "full_load: true"
}

dbtdocs () {
  model_name=$1
  target_file=$2

  dbt run-operation generate_model_yaml --args "{\"model_names\": [\"$model_name\"], \"upstream_descriptions\": \"true\", \"include_data_types\": \"false\"}" | tee temp_file
  sed -i '' -n '/models:/,$p' temp_file
  sed -i '' -n '/models:/!p' temp_file
  sed -i '' -n '/data_type:/!p' temp_file
  sed -i '' -n '/^\s*$/!p' temp_file

  if [ "$target_file" ]
      then
          echo "" >> $target_file 
          cat temp_file >> $target_file
          echo "Generated documentation written into $target_file"
      else
          echo "target file not supplied"
  fi
  rm temp_file
}
